dim(frame)
grid.raster(frame)
library("gridExtra")
grid.raster(frame[,,3])
frame.R[,,2:3] = 0
frame.G[,,1]=0
frame.R = frame
frame.G=frame
frame.B=frame
frame.R[,,2:3] = 0
frame.G[,,1]=0
frame.G[,,3]=0
frame.B[,,1:2]=0
img1 = rasterGrob(frame.R)
img2 = rasterGrob(frame.G)
img3 = rasterGrob(frame.B)
grid.arrange(img1, img2, img3, nrow=1)
library(png)
library("grid")
Apple <- sprintf("C:/Fall 2018/apple.png")
frame <- readPNG("C:/Fall 2018/apple.png")
grid.raster(frame[,,3])
dim(frame)
frame.R <- frame
frame.G<-frame
frame.B<-frame
frame.R[,,2:3] = 0
frame.G[,,1]=0
frame.G[,,3]=0
img1 = rasterGrob(frame.R)
frame.B[,,1:2]=0
img2 = rasterGrob(frame.G)
img3 = rasterGrob(frame.B)
grid.arrange(img1, img2, img3, nrow=1)
frame.R[,,2:3] <- 0
frame.G[,,1]<-0
frame.G[,,3]<-0
frame.B[,,1:2]<-0
img1 = rasterGrob(frame.R)
img2 = rasterGrob(frame.G)
img3 = rasterGrob(frame.B)
grid.arrange(img1, img2, img3, nrow=1)
grid.raster(frame)
dim(frame)
frame.R <- frame
frame.G<-frame
frame.B<-frame
frame.R[,,2:3] <- 0
frame.G[,,1]<-0
frame.G[,,3]<-0
frame.B[,,1:2]<-0
img1 = rasterGrob(frame.R)
img2 = rasterGrob(frame.G)
img3 = rasterGrob(frame.B)
grid.arrange(img1, img2, img3, nrow=1)
img1 <- rasterGrob(frame.R)
img2 <-rasterGrob(frame.G)
img3 <-  rasterGrob(frame.B)
grid.arrange(img1, img2, img3, nrow=1)
dim(frame)
library(png)
library("grid")
Apple <- sprintf("C:/Fall 2018/apple.png")
frame <- readPNG("C:/Fall 2018/apple.png")
dim(frame)
frame.R <- frame
frame.G<-frame
frame.B<-frame
frame.R[,,2:3] <- 0
frame.G[,,1]<-0
frame.G[,,3]<-0
frame.B[,,1:2]<-0
img1 <- rasterGrob(frame.R)
img2 <-rasterGrob(frame.G)
img3 <-  rasterGrob(frame.B)
grid.arrange(img1, img2, img3, nrow=1)
library(png)
library("grid")
frame <- readPNG("C:/Fall 2018/apple.png")
dim(frame)
frame.R <- frame
frame.G<-frame
frame.B<-frame
frame.R[,,2:3] <- 0
frame.G[,,1]<-0
frame.G[,,3]<-0
frame.B[,,1:2]<-0
img1 <- rasterGrob(frame.R)
img2 <-rasterGrob(frame.G)
img3 <-  rasterGrob(frame.B)
grid.arrange(img1, img2, img3, nrow=1)
library("grid")
librar("gridExtra")
library("gridExtra")
library(tibble)
library(ggplot2)
library("grid")
library("gridExtra")
install.packages('gridExtra')
library("gridExtra")
gridgframe.R <- frame
frame.G<-frame
frame.B<-frame
frame.R[,,2:3] <- 0
frame.G[,,1]<-0
frame.G[,,3]<-0
frame.B[,,1:2]<-0
img1 <- rasterGrob(frame.R)
img2 <-rasterGrob(frame.G)
img3 <-  rasterGrob(frame.B)
grid.arrange(img1, img2, img3, nrow=1)
df = data.frame(
red = matrix(frame[,,1], ncol=1),
green = matrix(frame[,,2], ncol=1),
blue = matrix(frame[,,3], ncol=1)
)
K = kmeans(df,4)
df$label = K$cluster
colors = data.frame(
label = 1:nrow(K$centers),
R = K$centers[,"red"],
G = K$centers[,"green"],
B = K$centers[,"blue"]
)
df$order = 1:nrow(df)
df = merge(df, colors)
df = df[order(df$order),]
df$order = NULL
R = matrix(df$R, nrow=dim(frame)[1])
G = matrix(df$G, nrow=dim(frame)[1])
B = matrix(df$B, nrow=dim(frame)[1])
frame.segmented = array(dim=dim(frame))
frame.segmented[,,1] = R
frame.segmented[,,2] = G
frame.segmented[,,3] = B
grid.raster(frame.segmented)
Time <- 60/max(ts)
HR <- Time * 22
print(HR)
print("heartRate:" + HR)
print("heartRate:", HR)
print("heartRate:")
print(HR)
library(png)
library(tibble)
library(ggplot2)
library(imager)
frame <- readPNG("C:/Fall 2018/apple.png")
plot(frame)
library(png)
library(tibble)
library(ggplot2)
library(imager)
frame <- readPNG("C:/Fall 2018/apple.png")
plot(frame)
frame <- readPNG("C:/Fall 2018/apple.png")
plot(frame)
frame <- system.file("C:/Fall 2018/apple.png",package='imager')
plot(frame)
im <- load.image(frame)
library(imager)
frame <- system.file("C:/Fall 2018/apple.png",package='imager')
im <- load.image(frame)
plot(frame)
im <- load.image("C:/Fall 2018/apple.png")
fpath <- system.file('C:/Fall 2018/apple.png',package='imager')
im <- load.image(fpath)
img<-readpng("C:\Fall 2018\apple.png")
img<-readpng("C:/Fall 2018/apple.png")
img<-readPNG("C:/Fall 2018/apple.png")
plot(1:10,ty="n")
rasterImage(img,2,2,4,4)
plot(1:6,ty="n")
rasterImage(img,2,2,4,4)
library(png)
library(tibble)
library(ggplot2)
library(imager)
require(png)
img<-readPNG("C:/Fall 2018/apple.png")
#get size
h<-dim(img)[1]
w<-dim(img)[2]
#open new file for output
png("out.png", width=w, height=h)
par(mar=c(0,0,0,0), xpd=NA, mgp=c(0,0,0), oma=c(0,0,0,0), ann=F)
plot.new()
plot.window(0:1, 0:1)
#fill plot with image
usr<-par("usr")
rasterImage(img, usr[1], usr[3], usr[2], usr[4])
#add text
text(.5,.5, "hello", cex=5, col=rgb(.2,.2,.2,.7))
#close image
dev.off()
plot(img)
img<-readPNG("C:/Fall 2018/Project2_DSCI1")
img<-readPNG("C:/Fall 2018/Project2_DSCI1/apple.png")
n <- length(list.files("C:/Fall 2018/Project2_DSCI1/frames.zip", "frame.*")) # Number of frames
library(png)
library(tibble)
library(ggplot2)
n <- length(list.files("C:/Fall 2018/Project2_DSCI1/frames.zip", "frame.*")) # Number of frames
r <- 30.005392    # frame rate
ts <- (0:(n-1))/r # time of each index
print(ts)
CountValRS <- c()
CountValGS <-c()
CountValBS <- c()
CountValTs <- c(ts)
CountValTotal <- c()
# Your initialization here
for (i in 1:n) {
name <- sprintf("C:/Project2DSCI/frames/frame%05d.png", i)
frame <- readPNG(name)
rs <- frame[,,1] # Matrix of red values
gs <- frame[,,2] # Matrix of green values
bs <- frame[,,3] # Matrix of blue values
CountValRS <- c(CountValRS, mean(rs))
CountValGS <- c(CountValGS, mean(gs))
CountValBS <- c(CountValBS,mean(bs))
CountValTotal <- c(CountValTotal, (mean(rs)+mean(gs)+mean(bs))/3)
}
TotalCount <- tibble(CountValTotal,CountValTs,CountValRS,CountValGS,CountValBS)
TotalPlot <-ggplot(data = TotalCount)+
geom_line(mapping = aes(x = CountValTs, y = CountValTotal))
TotalPlot
Time <- 60/max(ts) #
HR <- Time * 22  #22 is the number of peaks. I could not figure out how to make it automated
print("heartRate:")
print(HR)
install.packages("quantmod")
library(quantmod)
findPeaks(CountValTotal)
findPeaks(CountValTotal, ignore_threshold = 0, span = 3, strict = TRUE)
find_Peaks(CountValTotal)
find_peaks(CountValTotal)
findPeaks(CountValTotal)
findPeaks(TotalCount)
findPeaks(TotalCount$CountValTotal)
findPeaks(CountValTotal)
library(png)
library(tibble)
library(ggplot2)
library(quantmod)
n <- length(list.files("C:/Fall 2018/Project2_DSCI1/frames.zip", "frame.*")) # Number of frames
r <- 30.005392    # frame rate
ts <- (0:(n-1))/r # time of each index
print(ts)
CountValRS <- c()
CountValGS <-c()
CountValBS <- c()
CountValTs <- c(ts)
CountValTotal <- c()
# Your initialization here
for (i in 1:n) {
name <- sprintf("C:/Project2DSCI/frames/frame%05d.png", i)
frame <- readPNG(name)
rs <- frame[,,1] # Matrix of red values
gs <- frame[,,2] # Matrix of green values
bs <- frame[,,3] # Matrix of blue values
CountValRS <- c(CountValRS, mean(rs))
CountValGS <- c(CountValGS, mean(gs))
CountValBS <- c(CountValBS,mean(bs))
CountValTotal <- c(CountValTotal, (mean(rs)+mean(gs)+mean(bs))/3)
}
TotalCount <- tibble(CountValTotal,CountValTs,CountValRS,CountValGS,CountValBS)
TotalPlot <-ggplot(data = TotalCount)+
geom_line(mapping = aes(x = CountValTs, y = CountValTotal))
findPeaks(CountValTotal)
TotalPlot
Time <- 60/max(ts)
name <- sprintf("C:/Fall 2018/Project2_DSCI1/frames", i)
library(png)
library(tibble)
library(ggplot2)
library(quantmod)
n <- length(list.files("C:/Fall 2018/Project2_DSCI1/frames.zip", "frame.*")) # Number of frames
r <- 30.005392    # frame rate
ts <- (0:(n-1))/r # time of each index
print(ts)
CountValRS <- c()
CountValGS <-c()
CountValBS <- c()
CountValTs <- c(ts)
CountValTotal <- c()
# Your initialization here
for (i in 1:n) {
name <- sprintf("C:/Fall 2018/Project2_DSCI1/frames", i)
frame <- readPNG(name)
rs <- frame[,,1] # Matrix of red values
gs <- frame[,,2] # Matrix of green values
bs <- frame[,,3] # Matrix of blue values
CountValRS <- c(CountValRS, mean(rs))
CountValGS <- c(CountValGS, mean(gs))
CountValBS <- c(CountValBS,mean(bs))
CountValTotal <- c(CountValTotal, (mean(rs)+mean(gs)+mean(bs))/3)
}
TotalCount <- tibble(CountValTotal,CountValTs,CountValRS,CountValGS,CountValBS)
TotalPlot <-ggplot(data = TotalCount)+
geom_line(mapping = aes(x = CountValTs, y = CountValTotal))
# Your initialization here
for (i in 1:n) {
name <- sprintf("C:/Fall 2018/Project2_DSCI1/frames", i)
frame <- readPNG(name)
rs <- frame[,,1] # Matrix of red values
gs <- frame[,,2] # Matrix of green values
bs <- frame[,,3] # Matrix of blue values
CountValRS <- c(CountValRS, mean(rs))
CountValGS <- c(CountValGS, mean(gs))
CountValBS <- c(CountValBS,mean(bs))
CountValTotal <- c(CountValTotal, (mean(rs)+mean(gs)+mean(bs))/3)
}
n <- length(list.files("C:/Fall 2018/Project2_DSCI1/frames", "frame.*")) # Number of frames
r <- 30.005392    # frame rate
ts <- (0:(n-1))/r # time of each index
print(ts)
CountValRS <- c()
CountValGS <-c()
CountValBS <- c()
CountValTs <- c(ts)
CountValTotal <- c()
# Your initialization here
for (i in 1:n) {
name <- sprintf("C:/Fall 2018/Project2_DSCI1/frames", i)
frame <- readPNG(name)
rs <- frame[,,1] # Matrix of red values
gs <- frame[,,2] # Matrix of green values
bs <- frame[,,3] # Matrix of blue values
CountValRS <- c(CountValRS, mean(rs))
CountValGS <- c(CountValGS, mean(gs))
CountValBS <- c(CountValBS,mean(bs))
CountValTotal <- c(CountValTotal, (mean(rs)+mean(gs)+mean(bs))/3)
}
n <- length(list.files("C:/Fall 2018/Project2_DSCI1/frames", "frame.*")) # Number of frames
r <- 30.005392    # frame rate
ts <- (0:(n-1))/r # time of each index
print(ts)
CountValRS <- c()
# Your initialization here
for (i in 1:n) {
name <- sprintf("C:/Fall 2018/Project2_DSCI1/frames", i)
frame <- readPNG(name)
rs <- frame[,,1] # Matrix of red values
gs <- frame[,,2] # Matrix of green values
bs <- frame[,,3] # Matrix of blue values
CountValRS <- c(CountValRS, mean(rs))
CountValGS <- c(CountValGS, mean(gs))
CountValBS <- c(CountValBS,mean(bs))
CountValTotal <- c(CountValTotal, (mean(rs)+mean(gs)+mean(bs))/3)
}
library(png)
n <- length(list.files("C:/Fall 2018/DSCI1_Project2/frames", "frame.*")) # Number of frames
r <- 30.005392    # frame rate
ts <- (0:(n-1))/r # time of each index
for (i in 1:n) {
name <- sprintf("C:/Fall 2018/DSCI1_Project2/frames", i)
frame <- readPNG(name)
rs <- frame[,,1] # Matrix of red values
gs <- frame[,,2] # Matrix of green values
bs <- frame[,,3] # Matrix of blue values
# Per frame computation here
}
library(tidyverse)
countries <- tibble(bird = ["Sparrow", "Blue","Robin", "Cardinal", "Grouse"])
library(tibble)
countries <- tibble(bird = ["Sparrow", "Blue","Robin", "Cardinal", "Grouse"])
countries <- tibble(bird = c("Sparrow", "Blue","Robin", "Cardinal", "Grouse")
esc
countries <- tibble(bird = c("Sparrow", "Blue","Robin", "Cardinal", "Grouse")
)
countries <- tibble(bird = c("Sparrow", "Blue","Robin", "Cardinal", "Grouse")
, USA = c(TRUE,FALSE,FALSE,FALSE,TRUE)
, CANADA = c(FALSE, TRUE, FALSE, TRUE, FALSE)
, MEXICO = c(TRUE, FALSE,FALSE,TRUE, FALSE))
countries
letterBird <- tribble(~letter, ~bird,)
letterBird <- tribble(~letter, ~bird,
"A",  "Blue",
"B",  "Sparrow"
"C",   "Robin",
letterBird <- tribble(~letter, ~bird,
"A",  "Blue",
"B",  "Sparrow",
"C",   "Robin",
"B",   "Cardinal",
"C",   "Cardinal")
letterBird
inner_join(countries, letterBird, by = "bird")
library(tidyverse)
birdColor <- tribble(
~bird,     ~color
"Cardinal", "red",
"Bluebird", "blue",
"Oriole",   "orange"
)
birdColor <- tribble(
~bird,     ~color,
"Cardinal", "red",
"Bluebird", "blue",
"Oriole",   "orange"
)
birdSize <- tribble(
~bird,      ~size,
"Cardinal", "medium",
"Hummingbird", "small",
"Heron",     "large"
)
birdLog <- tribble(
~bird,    ~where,      ~when,
"Catbird",  "Houghton",  "May",
"Cardinal",  "Houghton", "May",
"Cardinal", "Houghton", "June",
"Bluebird",  "fod",   "July"
"Hummingbird", "Rochester", "April"
)
birdLog <- tribble(
~bird,    ~where,      ~when,
"Catbird",  "Houghton",  "May",
"Cardinal",  "Houghton", "May",
"Cardinal", "Houghton", "June",
"Bluebird",  "fod",   "July",
"Hummingbird", "Rochester", "April"
)
library(png)
rs <- frame[,,1] # Matrix of red values
frame <- readPNG("apple.png")
library(png)
frame <- readPNG("apple.png")
library(ggplot2)
x3<- c(1:1000)
runif(n = 50, min = min(x3), max = max(x3))
x3<- sample(1:1000)
runif(n = 50, min = min(x3), max = max(x3))
library(mclust)
install.packages("mclust")
library(ggmap)
library("ggplot2", lib.loc="~/R/win-library/3.3")
library(ggmap)
install.packages("ggmap")
library(ggmap)
mod1 <- Mclust(iris[,1:4])
library(mclust)
mod1 <- Mclust(iris[,1:4])
summary(mod1)
plot(mod1, what= c("BIC", "classification"))
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
remove.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
install.packages("Rcpp")
library(tidyverse)
install.packages("broom")
library(tidyverse)
update.packages()
library(tidyverse)
library(tidyverse)
library(grid)
library(gridExtra)
library(png)
library(OpenImageR)
install.packages("OpenImageR")
library(OpenImageR)
install.packages("shiny")
library(OpenImageR)
install.packages("shiny")
install.packages("shiny")
library(OpenImageR)
install.packages("OpenImageR")
library(OpenImageR)
library(shiny)
ui <- fluidPage(
)
server <- function(input, output, session) {
}
shinyApp(ui, server))
library(shiny)
install.packages("shiny")
install.packages("httpuv")
install.packages("shiny")
install.packages("httpuv")
library(tidyverse)
library(grid)
library(gridExtra)
library(png)
library(OpenImageR)
library(tidyverse)
library(OpenImageR)
library(grid)
library(gridExtra)
install.packages("igraph")
setwd("C:Fall_2018")
setwd("C:/Users/tsol3y/Fall_2019/Collaborative/Support_Data")
source(".DataProcess.R")
setwd("C:/Users/tsol3y/Fall_2019/Collaborative")
source(".DataProcess.R")
setwd("C:/Users/tsol3y/Fall_2019/Collaborative/Support_Data/")
source(".DataProcess.R")
setwd("C:/Users/tsol3y/Fall_2019/Collaborative/Support_Data")
source(".DataProcess.R")
setwd("C:/Users/tsol3y/Fall_2019/Collaborative/Support_Data")
source(".DataProcess.R")
source(".DataProcess.R")
source(".DownLoad_SP500.R")
install.packages("default")
library("default", lib.loc="~/R/win-library/3.5")
library("quantmod", lib.loc="~/R/win-library/3.5")
source(".DownLoad_SP500.R")
?paste
source(".TechIndi.R")
